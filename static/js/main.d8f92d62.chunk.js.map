{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode1","role","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","console","log","target","backgroundColor","borderColor","rows","disabled","length","newText","toUpperCase","showAlert","toLowerCase","navigator","clipboard","writeText","split","join","filter","element","prototype","PropTypes","string","isRequired","about","defaultProps","Alert","height","alert","word","newWord","charAt","slice","capitalize","msg","App","setMode","setAlert","message","typeee","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"0OAKe,SAASA,EAAOC,GAC3B,OACI,8BACI,qBAAKC,UAAS,yCAAoCD,EAAME,KAA1C,eAAqDF,EAAME,MAAzE,SACI,sBAAKD,UAAU,kBAAf,UACI,oBAAGA,UAAU,eAAeE,KAAK,SAAjC,cAA4CH,EAAMI,MAAlD,OACA,wBAAQH,UAAU,iBAAiBI,KAAK,SAAS,iBAAe,WAAW,iBAAe,0BAA0B,gBAAc,yBAAyB,gBAAc,QAAQ,aAAW,oBAA5L,SACI,sBAAMJ,UAAU,0BAEpB,sBAAKA,UAAU,2BAA2BK,GAAG,yBAA7C,UACI,oBAAIL,UAAU,kCAAd,SACI,oBAAIA,UAAU,WAAd,SACI,mBAAGA,UAAU,WAAW,eAAa,OAAOE,KAAK,SAAjD,sBA4BR,sBAAKF,UAAS,sCAAgD,UAAfD,EAAME,KAAmB,OAAS,SAAjF,UACI,uBAAOD,UAAU,mBAAmBM,QAASP,EAAMQ,YAAaH,KAAK,WAAWI,KAAK,SAASH,GAAG,2BAC7F,uBAAOL,UAAU,mBAAmBS,QAAQ,yBAA5C,2CC7CjB,SAASC,EAASX,GAE7B,IAuCA,EAAwBY,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAGA,OACI,qCACA,sBAAKb,UAAU,YAAYc,MAAO,CAACC,MAAsB,SAAfhB,EAAME,KAAkB,UAAY,WAA9E,UACI,6BAAKF,EAAMiB,UACX,sBAAKhB,UAAU,QAAf,UACI,uBAAOS,QAAQ,QAAQT,UAAU,aAAjC,oCAEA,0BAAUA,UAAU,eAAeiB,MAAOL,EAAMM,SAfvC,SAACC,GAClBC,QAAQC,IAAI,kBACZR,EAAQM,EAAMG,OAAOL,QAa2DH,MAAO,CAACS,gBAAgC,SAAfxB,EAAME,KAAkB,UAAY,UAAWc,MAAsB,SAAfhB,EAAME,KAAkB,UAAY,UAAWuB,YAA2B,SAAfzB,EAAME,KAAkB,UAAY,WAAYI,GAAG,QAAQoB,KAAK,UAEtR,wBAAQC,SAAwB,IAAdd,EAAKe,OAAYvB,KAAK,SAASE,QAnDzC,WAEZ,IAAIsB,EAAUhB,EAAKiB,cACnBhB,EAAQe,GACR7B,EAAM+B,UAAU,iCAAiC,YA+CsB9B,UAAU,wBAA7E,kCAEA,wBAAQ0B,SAAwB,IAAdd,EAAKe,OAAYvB,KAAK,SAASE,QA9CvC,WACd,IAAIsB,EAAUhB,EAAKmB,cACnBlB,EAAQe,GACR7B,EAAM+B,UAAU,iCAAiC,YA2CwB9B,UAAU,wBAA/E,kCACA,wBAAQ0B,SAAwB,IAAdd,EAAKe,OAAYvB,KAAK,SAASE,QAzCvC,WAId0B,UAAUC,UAAUC,UAAUtB,GAE9Bb,EAAM+B,UAAU,4BAA4B,YAmC6B9B,UAAU,wBAA/E,uBACA,wBAAQ0B,SAAwB,IAAdd,EAAKe,OAAYvB,KAAK,SAASE,QAjC1B,WAC3B,IAAIsB,EAAUhB,EAAKuB,MAAM,QACzBtB,EAAQe,EAAQQ,KAAK,MACrBrC,EAAM+B,UAAU,oCAAoC,YA8BkC9B,UAAU,wBAA5F,iCACA,wBAAQ0B,SAAwB,IAAdd,EAAKe,OAAYvB,KAAK,SAASE,QA5BtC,WAEfO,EADc,IAEdd,EAAM+B,UAAU,eAAe,YAyB2C9B,UAAU,wBAAhF,2BAEJ,sBAAKA,UAAU,iBAAiBc,MAAO,CAACC,MAAsB,SAAfhB,EAAME,KAAkB,UAAY,WAAnF,UACI,gDACA,8BAAIW,EAAKe,OAAT,iBAA+Bf,EAAKuB,MAAM,OAAOE,QAAO,SAACC,GAAW,OAAwB,IAAjBA,EAAQX,UAAaA,OAAhG,UAA8G,uBAA9G,8BAC4B,KAAQf,EAAKuB,MAAM,OAAOE,QAAO,SAACC,GAAW,OAAwB,IAAjBA,EAAQX,UAAaA,OADrG,oCDFZ7B,EAAOyC,UAAY,CACfpC,MAAOqC,IAAUC,OAAOC,WACxBC,MAAOH,IAAUC,OAAOC,YAG5B5C,EAAO8C,aAAe,CAClBzC,MAAO,qBACPwC,MAAO,SEnDIE,MAhBf,SAAe9C,GAMX,OACI,qBAAKe,MAAO,CAAEgC,OAAQ,QAAtB,SACK/C,EAAMgD,OAAS,sBAAK/C,UAAS,sBAAiBD,EAAMgD,MAAM3C,KAA7B,gCAAiEI,KAAK,QAApF,UACZ,uCARO,SAACwC,GAChB,IAAMC,EAAUD,EAAKjB,cACrB,OAAOkB,EAAQC,OAAO,GAAGrB,cAAgBoB,EAAQE,MAAM,GAMrCC,CAAWrD,EAAMgD,MAAM3C,MAAjC,OADY,MACyCL,EAAMgD,MAAMM,UC2ElEC,MAxEf,WACE,MAAwB3C,mBAAS,SAAjC,mBAAOV,EAAP,KAAasD,EAAb,KACA,EAA0B5C,mBAAS,MAAnC,mBAAOoC,EAAP,KAAcS,EAAd,KAEM1B,EAAY,SAAC2B,EAASC,GAC1BF,EAAS,CACPH,IAAKI,EACLrD,KAAMsD,IAGRC,YAAW,WACTH,EAAS,QACT,OA2BJ,OACE,qCAMI,cAAC1D,EAAD,CAAQK,MAAM,iBAAiBF,KAAMA,EAAMM,YA/B7B,WACL,UAATN,GACFsD,EAAQ,QACRK,SAASC,KAAK/C,MAAMS,gBAAkB,UACtCO,EAAU,6BAA8B,aAGxCyB,EAAQ,SACRK,SAASC,KAAK/C,MAAMS,gBAAkB,QACtCO,EAAU,8BAA+B,eAwBvC,cAAC,EAAD,CAAOiB,MAAOA,IAId,qBAAK/C,UAAU,iBAAf,SAQM,cAACU,EAAD,CAAUoB,UAAWA,EAAWd,QAAQ,6BAA6Bf,KAAMA,UC9D1E6D,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFb,SAASc,eAAe,SAa1BZ,M","file":"static/js/main.d8f92d62.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <div>\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n                <div className=\"container-fluid\">\r\n                    <a className=\"navbar-brand\" href=\"#myBox\"> {props.title} </a>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                            <li className=\"nav-item\">\r\n                                <a className=\"nav-link\" aria-current=\"page\" href=\"#myBox\">Home</a>\r\n                            </li>\r\n                            {/* <li className=\"nav-item\">\r\n                                <a className=\"nav-link\" href=\"/about\">{props.about}</a>\r\n                            </li> */}\r\n                            {/* <li className=\"nav-item dropdown\">\r\n              <a className=\"nav-link dropdown-toggle\" to=\"/\" id=\"navbarDropdown\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                Dropdown\r\n              </a>\r\n              <ul className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\r\n                <li><a className=\"dropdown-item\" to=\"/\">Action</a></li>\r\n                <li><a className=\"dropdown-item\" to=\"/\">Another action</a></li>\r\n                <li><hr className=\"dropdown-divider\"/></li>\r\n                <li><a className=\"dropdown-item\" to=\"/\">Something else here</a></li>\r\n              </ul>\r\n            </li> */}\r\n                            {/* <li className=\"nav-item\">\r\n              <a className=\"nav-link disabled\">Disabled</a>\r\n            </li> */}\r\n                        </ul>\r\n                        {/* <form className=\"d-flex\">\r\n                            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                            <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n                        </form> */}\r\n\r\n                        {/* <div className=\"form-check form-switch \" > */}\r\n                        {/* <div className=\"form-check form-switch text-light\" > */}\r\n\r\n                        <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`} >\r\n                            <input className=\"form-check-input\" onClick={props.toggleMode1} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n                                <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n                        </div>\r\n\r\n                        {/* <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`} >\r\n                            <input className=\"form-check-input\" onClick={props.toggleMode2} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n                                <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode 2</label>\r\n                        </div> */}\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nNavbar.prototype = {\r\n    title: PropTypes.string.isRequired,\r\n    about: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: 'Please write title',\r\n    about: 'About'\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const UpClick = () => {\r\n        // console.log(\"Uppercase was clicked + text\");\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Text is Converted to Uppercase\",\"success\");\r\n    }\r\n\r\n    const DownClick = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Text is Converted to Lowercase\",\"success\");\r\n    }\r\n\r\n    const CopyClick = () => {\r\n        // let text = document.getElementById(\"myBox\");\r\n        // text.select();\r\n        // navigator.clipboard.writeText(text.value);\r\n        navigator.clipboard.writeText(text);\r\n        // document.getSelection().removeAllRanges();\r\n        props.showAlert(\"Text copied to clipboard!\",\"success\");\r\n    }\r\n    \r\n    const RemoveExtraSpacesClick = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"All Extra Spaces has been removed\",\"success\");\r\n    }\r\n\r\n    const ClearClick = () => {\r\n        let newText = '';\r\n        setText(newText);\r\n        props.showAlert(\"Text Cleared\",\"success\");\r\n    }\r\n    \r\n    const onChangeText = (event) => {\r\n        console.log(\"on Change Text\");\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const [text, setText] = useState(''); // Name of the state = 'text' and to update(means change) that 'text' we use 'setText' function\r\n    // text = \"new text\" //Wrong way to change state\r\n\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode === 'dark' ? '#f8f9fa' : '#042743'}}>\r\n            <h1>{props.heading}</h1>\r\n            <div className=\" mb-3\">\r\n                <label htmlFor=\"myBox\" className=\"form-label\">Enter the text below :</label>\r\n                {/* <textarea className=\"form-control\" value={text} onChange={onChangeText} style={{backgroundColor: props.mode === 'dark' ? '#17191a' : '#f8f9fa', color: props.mode === 'dark' ? '#f8f9fa' : '#042743', }} id=\"myBox\" rows=\"10\"></textarea> */}\r\n                <textarea className=\"form-control\" value={text} onChange={onChangeText} style={{backgroundColor: props.mode === 'dark' ? '#17191a' : '#f8f9fa', color: props.mode === 'dark' ? '#f8f9fa' : '#042743', borderColor:props.mode === 'dark' ? '#f8f9fa' : '#212529'}} id=\"myBox\" rows=\"10\"></textarea>\r\n            </div>\r\n            <button disabled={text.length===0} type=\"button\" onClick={UpClick} className=\"btn btn-primary mx-2 \">Convert to Uppercase</button>\r\n            {/* <button type=\"button\" onClick={UpClick} className=\"btn btn-danger mx-2 \">Convert to Uppercase</button> */}\r\n            <button disabled={text.length===0} type=\"button\" onClick={DownClick} className=\"btn btn-primary mx-2 \">Convert to Lowercase</button>\r\n            <button disabled={text.length===0} type=\"button\" onClick={CopyClick} className=\"btn btn-primary mx-2 \">Copy Text</button>\r\n            <button disabled={text.length===0} type=\"button\" onClick={RemoveExtraSpacesClick} className=\"btn btn-primary mx-2 \">Remove Extra Spaces</button>\r\n            <button disabled={text.length===0} type=\"button\" onClick={ClearClick} className=\"btn btn-primary mx-2 \">Clear Text</button>\r\n        </div>\r\n        <div className=\"container my-3\" style={{color: props.mode === 'dark' ? '#f8f9fa' : '#042743'}}>\r\n            <h3>You Entered : </h3>\r\n            <p>{text.length} Characters | {text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} Words <br/>\r\n            You can read above text in {0.004 * text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} Minutes (Average Speed)\r\n            </p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word) => {\r\n        const newWord = word.toLowerCase();\r\n        return newWord.charAt(0).toUpperCase() + newWord.slice(1);\r\n    }\r\n\r\n    return (\r\n        <div style={{ height: '50px' }}>\r\n            {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong> {capitalize(props.alert.type)} </strong> : {props.alert.msg}\r\n                {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert;\r\n","// import { useState } from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n// import About from './components/About';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\n\n// import { Routes, Route, Link } from \"react-router-dom\";\n\n// import { Routes ,Route } from 'react-router-dom';\n// import { Router, Link } from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, typeee) => {\n    setAlert({\n      msg: message,\n      type: typeee\n    })\n\n    setTimeout(() => {\n      setAlert(null);\n    },1500);\n  }\n\n  const toggleMode1 = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark Mode has been enabled\", \"success\");\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light Mode has been enabled\", \"success\");\n    }\n  }\n  // const toggleMode2 = () => {\n  //   if (mode === 'light') {\n  //     setMode('dark');\n  //     document.body.style.backgroundColor = '#730808';\n  //     showAlert(\"Dark Mode has been enabled\", \"success\");\n  //   }\n  //   else {\n  //     setMode('light');\n  //     document.body.style.backgroundColor = 'white';\n  //     showAlert(\"Light Mode has been enabled\", \"success\");\n  //   }\n  // }\n  return (\n    <>\n      {/* <Router> */}\n        {/* <Navbar title=\"TextOperations\" about=\"About Us\" /> */}\n\n        {/* <Navbar title=\"TextOperations\" mode={mode} toggleMode1={toggleMode1} toggleMode2={toggleMode2} /> */}\n        \n        <Navbar title=\"TextOperations\" mode={mode} toggleMode1={toggleMode1}  />\n\n        <Alert alert={alert} />\n\n\n        {/* my-3 means Margin in y-Axis 3px */}\n        <div className=\"container my-3\" >\n\n          {/* <Routes> */}\n            {/* <Route path=\"/about\"> */}\n              {/* <About mode={mode} /> */}\n            {/* </Route> */}\n            {/* <Route path=\"/\"> */}\n\n              <TextForm showAlert={showAlert} heading=\"Welcome to TextOperations!\" mode={mode} />\n\n            {/* </Route> */}\n          {/* </Routes> */}\n\n        </div>\n\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n// import { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// ReactDOM.render(\n//   <BrowserRouter>\n//     <App />\n//   </BrowserRouter>,\n//   document.getElementById(\"root\")\n// );\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}